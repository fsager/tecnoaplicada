package -##root_package##-.persistence.impl;

import java.util.List;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.criterion.Example;
import -##root_package##-.domain.*;
import -##root_package##-.persistence.-##ClassName##-Dao;
import ar.com.trimix.common.persistence.util.DAOObject;


/**
 * Home object for domain model class -##ClassName##-.
 * @see -##root_package##-.persistence.impl.-##ClassName##-
 * @author Hibernate Tools
 */
public class -##ClassName##-Home extends DAOObject implements -##ClassName##-Dao {

    private static final Log log = LogFactory.getLog(-##ClassName##-Home.class);
    
    public void insert(-##ClassName##- transientInstance) throws Exception {
        log.debug("persisting -##ClassName##- instance");
        try {
            saveObject(transientInstance);
            log.debug("persist successful");
        }
        catch (RuntimeException re) {
            log.error("persist failed", re);
            throw re;
        }
    }
    
    public void update(-##ClassName##- transientInstance) throws Exception {
        log.debug("persisting -##ClassName##- instance");
        try {
            updateObject(transientInstance);
            log.debug("persist successful");
        }
        catch (RuntimeException re) {
            log.error("persist failed", re);
            throw re;
        }
    }
    
    public void delete(-##ClassName##- persistentInstance) throws Exception {
        log.debug("deleting -##ClassName##- instance");
        try {
            deleteObject(persistentInstance);
            log.debug("delete successful");
        }
        catch (RuntimeException re) {
            log.error("delete failed", re);
            throw re;
        }
    }
    
    public -##ClassName##- get(Long p_Id) throws Exception {
        log.debug("getting -##ClassName##- instance with id: " + p_Id);
        try {
            -##ClassName##- instance = (-##ClassName##-) getHibernateTemplate()
                    .get(-##ClassName##-.class, p_Id);
            if (instance==null) {
                log.debug("get successful, no instance found");
            }
            else {
                log.debug("get successful, instance found");
            }
            return instance;
        }
        catch (RuntimeException re) {
            log.error("get failed", re);
            throw re;
        }
    }
    
    
    public List getAll(-##ClassName##- p_example) throws Exception {
        log.debug("finding -##ClassName##- instance by example");
        try {
            List results = getSession()
                    .createCriteria(-##ClassName##-.class)
                    .add(Example.create(p_example)
                    			.enableLike()
                    			.ignoreCase())
            .list();
            log.debug("find by example successful, result size: " + results.size());
            return results;
        }
        catch (RuntimeException re) {
            log.error("find by example failed", re);
            throw re;
        }
    }
}