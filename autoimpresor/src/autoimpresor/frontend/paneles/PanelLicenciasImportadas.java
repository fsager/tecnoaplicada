/*
 * PanelLicenciasImportadas.java
 *
 * Created on __DATE__, __TIME__
 */

package autoimpresor.frontend.paneles;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.zip.GZIPInputStream;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.JFormattedTextField.AbstractFormatter;
import javax.swing.border.TitledBorder;
import javax.swing.table.TableRowSorter;

import testerGeneral.comparetors.DateComparator;
import testerGeneral.domain.Constantes;
import testerGeneral.domain.Dominio;
import testerGeneral.domain.Propiedad;
import testerGeneral.service.DominioDefinition;
import testerGeneral.service.PropiedadDefinition;
import autoimpresor.business.ContextManager;
import autoimpresor.domain.CarnetLicencias;
import autoimpresor.frontend.ExtensionFileFilter;
import autoimpresor.frontend.tablemodels.TableModelCarnet;
import autoimpresor.service.CarnetLicenciasDefinition;
import frontend.buttons.ButtonBuscar;
import frontend.components.JOptionPaneTesterGral;
import frontend.utils.Util;
import frontend.ventanas.JInternalFrameTesterGral;
import frontend.ventanas.VentanaExaminar;
import frontend.ventanas.VentanaReportes;

/**
 *
 * @author  __USER__
 */
public class PanelLicenciasImportadas extends javax.swing.JPanel {

	/** Creates new form PanelLicenciasImportadas */
	public PanelLicenciasImportadas() {

		initComponents();
		((PanelMenuPrincipal) Util.panelMenu).calcularLicenciasPorEstado();
		lbFechaEjemplo.setText(Util.mostrasMascara());
		valorPorDefectoFecha = txtEntreDesde.getText();
		setTableModelCarnets(new ArrayList());
		Util.ocultarSinResultados(lbSinResultados, true);

		cargarListBox();
	}

	public void cargarListBox() {
		try {

			cbBusquedaLocalidad.removeAllItems();
			cbBusquedaLocalidad.addItem("");

			Connection conn = ContextManager.getCurrentConnection();
			String sql = "select distinct MNC_NOMBRE from APP.CARNET_LICENCIAS order by 1 asc";
			Statement stm = conn.createStatement();
			ResultSet rs = stm.executeQuery(sql);

			while (rs.next()) {
				cbBusquedaLocalidad.setSelectedIndex(0);
				cbBusquedaLocalidad.addItem(rs.getString(1));
			}

		} catch (SQLException e) {
			throw new RuntimeException(e);
		}

	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		buttonGroup1 = new javax.swing.ButtonGroup();
		jPanel3 = new javax.swing.JPanel();
		jLabel3 = new javax.swing.JLabel();
		txtBusquedaApellido = new javax.swing.JTextField();
		txtBusquedaNombre = new javax.swing.JTextField();
		jLabel19 = new javax.swing.JLabel();
		jLabel8 = new javax.swing.JLabel();
		txtBusquedaDni = new javax.swing.JFormattedTextField();
		jPanel2 = new javax.swing.JPanel();
		checkMesActual = new javax.swing.JRadioButton();
		checkEntre = new javax.swing.JRadioButton();
		txtEntreDesde = Util.setFecha();
		txtEntreHasta = Util.setFecha();
		cbBusquedaLocalidad = new javax.swing.JComboBox();
		jLabel21 = new javax.swing.JLabel();
		btnBuscar = new ButtonBuscar();
		lbFechaEjemplo = new javax.swing.JLabel();
		checkSoloImpr = new javax.swing.JCheckBox();
		checkSoloPendientes = new javax.swing.JCheckBox();
		jPanel1 = new javax.swing.JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		tableLicencias = new javax.swing.JTable();
		lbSinResultados = new javax.swing.JLabel();
		btnReimprimir = new javax.swing.JButton();
		btnImportar = new javax.swing.JButton();
		btnReimprimir1 = new javax.swing.JButton();
		btnImportar1 = new javax.swing.JButton();
		btnImportar2 = new javax.swing.JButton();

		jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null,
				Constantes.PANEL_FILTROS_BUSQUEDA,
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
				javax.swing.border.TitledBorder.DEFAULT_POSITION,
				new java.awt.Font("Segoe UI", 3, 12)));
		jPanel3.setFocusable(false);

		jLabel3.setText(Constantes.LB_APELLIDO);

		txtBusquedaApellido.setMaximumSize(new java.awt.Dimension(150, 22));
		txtBusquedaApellido
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						txtBusquedaApellidoActionPerformed(evt);
					}
				});

		txtBusquedaNombre.setMaximumSize(new java.awt.Dimension(150, 22));
		txtBusquedaNombre
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						txtBusquedaNombreActionPerformed(evt);
					}
				});

		jLabel19.setText(Constantes.LB_NOMBRE);

		jLabel8.setText(Constantes.LB_NRO_DOCUMENTO);

		txtBusquedaDni.setMaximumSize(new java.awt.Dimension(150, 22));
		txtBusquedaDni.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				txtBusquedaDniActionPerformed(evt);
			}
		});

		buttonGroup1.add(checkMesActual);
		checkMesActual.setSelected(true);
		checkMesActual.setText("Mostrar s\u00f3lo mes actual");

		buttonGroup1.add(checkEntre);
		checkEntre.setText("Mostrar entre:");

		txtEntreDesde.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusGained(java.awt.event.FocusEvent evt) {
				txtEntreDesdeFocusGained(evt);
			}
		});

		txtEntreHasta.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusGained(java.awt.event.FocusEvent evt) {
				txtEntreHastaFocusGained(evt);
			}
		});

		cbBusquedaLocalidad.setModel(new javax.swing.DefaultComboBoxModel(
				new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

		jLabel21.setText("Localidad:");

		btnBuscar.setToolTipText("Buscar");
		btnBuscar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnBuscarActionPerformed(evt);
			}
		});

		lbFechaEjemplo.setFont(new java.awt.Font("Segoe UI", 0, 11));
		lbFechaEjemplo.setText("jLabel17");

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(
				jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout
				.setHorizontalGroup(jPanel2Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel2Layout
										.createSequentialGroup()
										.addGroup(
												jPanel2Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																jPanel2Layout
																		.createSequentialGroup()
																		.addContainerGap()
																		.addComponent(
																				jLabel21)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				cbBusquedaLocalidad,
																				0,
																				207,
																				Short.MAX_VALUE)
																		.addGap(
																				60,
																				60,
																				60))
														.addGroup(
																jPanel2Layout
																		.createSequentialGroup()
																		.addContainerGap()
																		.addComponent(
																				checkEntre)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addGroup(
																				jPanel2Layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING)
																						.addComponent(
																								txtEntreHasta,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								88,
																								Short.MAX_VALUE)
																						.addComponent(
																								txtEntreDesde,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								88,
																								javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																		.addComponent(
																				lbFechaEjemplo,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				85,
																				javax.swing.GroupLayout.PREFERRED_SIZE))
														.addGroup(
																jPanel2Layout
																		.createSequentialGroup()
																		.addGap(
																				8,
																				8,
																				8)
																		.addComponent(
																				checkMesActual)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																				136,
																				Short.MAX_VALUE)))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												btnBuscar,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												48,
												javax.swing.GroupLayout.PREFERRED_SIZE)));

		jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL,
				new java.awt.Component[] { txtEntreDesde, txtEntreHasta });

		jPanel2Layout
				.setVerticalGroup(jPanel2Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel2Layout
										.createSequentialGroup()
										.addGroup(
												jPanel2Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.TRAILING)
														.addComponent(
																btnBuscar,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																48,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addGroup(
																jPanel2Layout
																		.createSequentialGroup()
																		.addComponent(
																				checkMesActual)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addGroup(
																				jPanel2Layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.BASELINE)
																						.addComponent(
																								txtEntreDesde,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(
																								lbFechaEjemplo)
																						.addComponent(
																								checkEntre))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				txtEntreHasta,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				javax.swing.GroupLayout.PREFERRED_SIZE)))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanel2Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																cbBusquedaLocalidad,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																jLabel21,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																22,
																Short.MAX_VALUE))));

		((ButtonBuscar) btnBuscar).init();

		checkSoloImpr.setText("Mostrar s\u00f3lo licencias impresas");
		checkSoloImpr.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				checkSoloImprActionPerformed(evt);
			}
		});

		checkSoloPendientes.setText("Mostrar s\u00f3lo licencias pendientes");
		checkSoloPendientes
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						checkSoloPendientesActionPerformed(evt);
					}
				});

		javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(
				jPanel3);
		jPanel3.setLayout(jPanel3Layout);
		jPanel3Layout
				.setHorizontalGroup(jPanel3Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel3Layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel3Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																jPanel3Layout
																		.createSequentialGroup()
																		.addGroup(
																				jPanel3Layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING)
																						.addComponent(
																								jLabel19,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								113,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(
																								jLabel3,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								112,
																								javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addGroup(
																				jPanel3Layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.TRAILING,
																								false)
																						.addComponent(
																								txtBusquedaNombre,
																								javax.swing.GroupLayout.Alignment.LEADING,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE)
																						.addComponent(
																								txtBusquedaDni,
																								javax.swing.GroupLayout.Alignment.LEADING,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								150,
																								Short.MAX_VALUE)
																						.addComponent(
																								txtBusquedaApellido,
																								javax.swing.GroupLayout.Alignment.LEADING,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								116,
																								Short.MAX_VALUE)))
														.addComponent(
																jLabel8,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																112,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																checkSoloImpr)
														.addComponent(
																checkSoloPendientes))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												jPanel2,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addContainerGap(78, Short.MAX_VALUE)));
		jPanel3Layout
				.setVerticalGroup(jPanel3Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel3Layout
										.createSequentialGroup()
										.addGroup(
												jPanel3Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.TRAILING)
														.addComponent(
																jPanel2,
																javax.swing.GroupLayout.Alignment.LEADING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE)
														.addGroup(
																javax.swing.GroupLayout.Alignment.LEADING,
																jPanel3Layout
																		.createSequentialGroup()
																		.addGroup(
																				jPanel3Layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.BASELINE)
																						.addComponent(
																								jLabel8)
																						.addComponent(
																								txtBusquedaDni,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addGroup(
																				jPanel3Layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.BASELINE)
																						.addComponent(
																								jLabel3)
																						.addComponent(
																								txtBusquedaApellido,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addGroup(
																				jPanel3Layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.BASELINE)
																						.addComponent(
																								jLabel19)
																						.addComponent(
																								txtBusquedaNombre,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																		.addComponent(
																				checkSoloImpr)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				checkSoloPendientes)))
										.addGap(13, 13, 13)));

		jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null,
				Constantes.PANEL_RESULTADOS_BUSQUEDA,
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
				javax.swing.border.TitledBorder.DEFAULT_POSITION,
				new java.awt.Font("Segoe UI", 3, 12)));
		jPanel1.setFocusable(false);

		jScrollPane1.setMinimumSize(new java.awt.Dimension(640, 402));
		jScrollPane1.setPreferredSize(new java.awt.Dimension(640, 402));
		jScrollPane1.setRequestFocusEnabled(false);

		tableLicencias.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] { { "fsager", "No" }, { "vpaolini", "Si" },
						{ "jtesta", "Si" }, { null, null } }, new String[] {
						"Nombre usuario", "Habilitado" }) {
			Class[] types = new Class[] { java.lang.String.class,
					java.lang.String.class };
			boolean[] canEdit = new boolean[] { false, false };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		tableLicencias.setMinimumSize(null);
		tableLicencias.setPreferredSize(null);
		tableLicencias.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				tableLicenciasMouseClicked(evt);
			}
		});
		jScrollPane1.setViewportView(tableLicencias);

		lbSinResultados.setForeground(new java.awt.Color(204, 0, 0));
		lbSinResultados.setIcon(new ImageIcon(getClass().getResource(
				Constantes.IMG_ERROR)));
		lbSinResultados.setText(Constantes.ERROR_SIN_RESULTADOS);

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(
				jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout
				.setHorizontalGroup(jPanel1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel1Layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																jScrollPane1,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																727,
																Short.MAX_VALUE)
														.addComponent(
																lbSinResultados,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																355,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addContainerGap()));
		jPanel1Layout
				.setVerticalGroup(jPanel1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel1Layout
										.createSequentialGroup()
										.addComponent(
												jScrollPane1,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												315,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												lbSinResultados,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												24,
												javax.swing.GroupLayout.PREFERRED_SIZE)));

		btnReimprimir.setText("Imprimir licencias seleccionadas");
		btnReimprimir.setEnabled(false);
		btnReimprimir.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnReimprimirActionPerformed(evt);
			}
		});

		btnImportar.setText("Importar licencias");
		btnImportar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnImportarActionPerformed(evt);
			}
		});

		btnReimprimir1.setText("Imprimir Pendientes");
		btnReimprimir1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnReimprimir1ActionPerformed(evt);
			}
		});

		btnImportar1.setText("Imprimir Resultados");
		btnImportar1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnImportar1ActionPerformed(evt);
			}
		});

		btnImportar2.setText("Eliminar Licencias");
		btnImportar2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnImportar2ActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																jPanel1,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE)
														.addComponent(
																jPanel3,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE)
														.addGroup(
																javax.swing.GroupLayout.Alignment.TRAILING,
																layout
																		.createSequentialGroup()
																		.addComponent(
																				btnImportar1)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				btnImportar2)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				Short.MAX_VALUE)
																		.addComponent(
																				btnImportar)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				btnReimprimir1)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				btnReimprimir)))
										.addContainerGap()));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addComponent(
												jPanel3,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												jPanel1,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																btnReimprimir,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																20,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																btnReimprimir1,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																20,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																btnImportar,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																20,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																btnImportar1,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																20,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																btnImportar2,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																20,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));
	}// </editor-fold>
	//GEN-END:initComponents

	private void checkSoloImprActionPerformed(java.awt.event.ActionEvent evt) {
		if (checkSoloImpr.isSelected()) {
			checkSoloPendientes.setSelected(false);
		}
	}

	private void checkSoloPendientesActionPerformed(
			java.awt.event.ActionEvent evt) {
		if (checkSoloPendientes.isSelected()) {
			checkSoloImpr.setSelected(false);
		}
	}

	private void btnImportar2ActionPerformed(java.awt.event.ActionEvent evt) {
		try {
			int[] rows = tableLicencias.getSelectedRows();
			for (int i = 0; i < rows.length; i++) {
				int sel = tableLicencias.convertRowIndexToModel(rows[i]);
				carnetLicenciasService
						.delete(((TableModelCarnet) tableLicencias.getModel())
								.getValueAt(sel));
			}

			buscarCarnets();
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	private void btnImportar1ActionPerformed(java.awt.event.ActionEvent evt) {

		String srcString = "reportes/carnetsImpresos.jasper";
		TableModelCarnet tableModel = (TableModelCarnet) tableLicencias
				.getModel();
		HashMap parameterMap = new HashMap();

		parameterMap.put("municipalidad", cbBusquedaLocalidad.getSelectedItem()
				.toString());
		parameterMap.put("fecha_desde", sdf.format(fechaDesde));
		parameterMap.put("fecha_hasta", sdf.format(fechaHasta));
		parameterMap.put("total", "" + tableModel.getLst().size());

		VentanaReportes ventanaReportes = new VentanaReportes(this,
				parameterMap, srcString, tableModel.getLst());
	}

	private void btnReimprimir1ActionPerformed(java.awt.event.ActionEvent evt) {

		try {
			List<CarnetLicencias> carnets = carnetLicenciasService
					.getPendientes();
			if (carnets.size() > 0) {
				abrirVentanaMargenes(carnets);
				buscarCarnets();
			} else
				JOptionPaneTesterGral.showInternalMessageDialog(this,
						"No existen impresiones pendientes.", "Error",
						JOptionPane.ERROR_MESSAGE);

		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	private void txtEntreHastaFocusGained(java.awt.event.FocusEvent evt) {
		checkEntre.setSelected(true);
	}

	private void txtEntreDesdeFocusGained(java.awt.event.FocusEvent evt) {
		checkEntre.setSelected(true);
	}

	private void btnImportarActionPerformed(java.awt.event.ActionEvent evt) {
		Util.mostrarPanelOperacionesLargas();

		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				try {

					Propiedad prop = ContextManager
							.getPropertyObj("SISTEMA.UBICACION.LICENCIAS.IMPORTAR");
					String extencion[] = { "aut" };
					ExtensionFileFilter fileFilter = new ExtensionFileFilter(
							"Licencias", extencion);
					final VentanaExaminar ventanaExaminar = new VentanaExaminar(
							JFileChooser.FILES_ONLY, JFileChooser.OPEN_DIALOG,
							prop.getPropValor(), fileFilter);
					ventanaExaminar.pack();
					Util.agregarIframe(ventanaExaminar);
					ventanaExaminar.doModal(Util.framePrincipal.getRootPane());
					ventanaExaminar.setVisible(true);

					if (ventanaExaminar.getRutaSeleccionada() != null) {
						File f = new File(ventanaExaminar.getRutaSeleccionada());

						prop.setPropValor(f.getParentFile().getAbsolutePath());
						PropiedadDefinition propiedadService = (PropiedadDefinition) ContextManager
								.getBizObject("propiedadService");
						prop.setPropBlob(new byte[1]);
						propiedadService.update(prop);

						FileInputStream fis = new FileInputStream(f);
						GZIPInputStream gs = new GZIPInputStream(fis);
						ObjectInputStream ois = new ObjectInputStream(gs);
						List<CarnetLicencias> carnetLicencias = (List<CarnetLicencias>) ois
								.readObject();
						ois.close();
						fis.close();

						Dominio dom = new Dominio();
						dom.setDomTipo("LICENCIAS_IMPORTADAS_CANTIDAD");
						dom.setDomClave("LICENCIAS_IMPORTADAS_CANTIDAD");
						dom.setDomCodigo("LICENCIAS_IMPORTADAS_CANTIDAD");
						dom.setDomValorMostrar("" + carnetLicencias.hashCode());

						if (dominioService.getAll(dom).size() == 0) {
							for (int i = 0; i < carnetLicencias.size(); i++) {
								CarnetLicencias carss = carnetLicencias.get(i);

								if (!(carss.getPerFoto() != null && carss
										.getPerFoto().length > 1))
									carss.setPerFoto(new byte[1]);
								if (!(carss.getPerFirma() != null && carss
										.getPerFirma().length > 1))
									carss.setPerFirma(new byte[1]);
								if (!(carss.getUsrFirma() != null && carss
										.getUsrFirma().length > 1))
									carss.setUsrFirma(new byte[1]);
								if (!(carss.getMncEscudo() != null && carss
										.getMncEscudo().length > 1))
									carss.setMncEscudo(new byte[1]);

								carss.setCliFechaImport(new Date());
								carnetLicenciasService.insert(carnetLicencias
										.get(i));

								dominioService.insert(dom);
							}
						} else {
							JOptionPaneTesterGral.showInternalMessageDialog(
									"Las licencias ya fueron importadas",
									"Importar Licencias",
									JOptionPane.ERROR_MESSAGE);
						}

					}
					Util.ocultarPanelOperacionesLargas();
					cargarListBox();
					buscarCarnets();
				} catch (Exception e) {
					Util.ocultarPanelOperacionesLargas();
					throw new RuntimeException(e);
				}
			}
		});
	}

	private void btnReimprimirActionPerformed(java.awt.event.ActionEvent evt) {

		List<CarnetLicencias> carnets = new ArrayList();
		int[] rows = tableLicencias.getSelectedRows();
		for (int i = 0; i < rows.length; i++) {
			int sel = tableLicencias.convertRowIndexToModel(rows[i]);
			carnets.add(((TableModelCarnet) tableLicencias.getModel())
					.getValueAt(sel));
		}
		abrirVentanaMargenes(carnets);
	}

	public void abrirVentanaMargenes(List<CarnetLicencias> carnets) {
		final JInternalFrameTesterGral internalframe = new JInternalFrameTesterGral(
				"Imprimir", false, true, false, false);
		PanelMargenesImpresion panel = new PanelMargenesImpresion(carnets);
		internalframe.add(panel);
		internalframe.pack();

		Util.centrarIframes(internalframe);

		internalframe
				.addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
					public void internalFrameActivated(
							javax.swing.event.InternalFrameEvent evt) {
					}

					public void internalFrameClosed(
							javax.swing.event.InternalFrameEvent evt) {
					}

					public void internalFrameClosing(
							javax.swing.event.InternalFrameEvent evt) {
						internalframe.close();
					}

					public void internalFrameDeactivated(
							javax.swing.event.InternalFrameEvent evt) {
					}

					public void internalFrameDeiconified(
							javax.swing.event.InternalFrameEvent evt) {
					}

					public void internalFrameIconified(
							javax.swing.event.InternalFrameEvent evt) {
					}

					public void internalFrameOpened(
							javax.swing.event.InternalFrameEvent evt) {
					}
				});

		internalframe.doModal(Util.framePrincipal.getRootPane());
		internalframe.setVisible(true);

		if (panel.isImprimio()) {
			try {
				for (int i = 0; i < carnets.size(); i++) {
					CarnetLicencias car = carnets.get(i);
					if (car.getCliFechaImpresion() == null) {
						car.setCliFechaImpresion(new Date());
						car.setCliCantImpresiones(1L);
					} else {
						long cant = car.getCliCantImpresiones();
						cant++;
						car.setCliCantImpresiones(cant);
					}

					carnetLicenciasService.update(car);
				}
			} catch (Exception ex) {
				throw new RuntimeException(ex);
			}
		}

	}

	private void tableLicenciasMouseClicked(java.awt.event.MouseEvent evt) {
		//seleccionarPersona();
	}

	private void txtBusquedaDniActionPerformed(java.awt.event.ActionEvent evt) {
		buscarCarnets();
	}

	private void txtBusquedaNombreActionPerformed(java.awt.event.ActionEvent evt) {
		buscarCarnets();
	}

	private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {
		buscarCarnets();
	}

	private void txtBusquedaApellidoActionPerformed(
			java.awt.event.ActionEvent evt) {
		buscarCarnets();
	}

	public void buscarCarnets() {
		Calendar cal = Calendar.getInstance();
		fechaDesde = new Date();
		fechaHasta = new Date();

		boolean error = false;
		setTableModelCarnets(new ArrayList());
		try {
			Util.ocultarSinResultados(lbSinResultados, true);
			CarnetLicencias car = new CarnetLicencias();
			car.setPerApellido(txtBusquedaApellido.getText() + "%");
			car.setPerNombre(txtBusquedaNombre.getText() + "%");

			if (!txtBusquedaDni.getText().equals("")
					&& !Util.validarDni(txtBusquedaDni.getText())) {
				car.setPerNumeroDoc(null);
				Util.mostrarError(lbSinResultados,
						Constantes.ERROR_PER_DNI_SINFORMATO, false);
				error = true;

			} else if (!txtBusquedaDni.getText().equals("")
					&& Util.validarDni(txtBusquedaDni.getText())) {
				car.setPerNumeroDoc(txtBusquedaDni.getText());
			}

			if (checkMesActual.isSelected()) {

				cal.set(Calendar.DAY_OF_MONTH, 1);
				fechaDesde = cal.getTime();
				Util.redondearFecha(fechaDesde);
				cal.add(Calendar.MONTH, 1);
				fechaHasta = cal.getTime();
				Util.redondearFecha(fechaHasta);

			} else {

				fechaDesde = validarFecha(txtEntreDesde);
				fechaHasta = validarFecha(txtEntreHasta);

				if (fechaDesde == null || fechaHasta == null) {
					error = true;
				} else {
					Util.redondearFecha(fechaDesde);
					Util.redondearFecha(fechaHasta);
				}
			}

			if (cbBusquedaLocalidad.getSelectedItem() != null
					&& !cbBusquedaLocalidad.getSelectedItem().equals(""))
				car
						.setMncNombre((String) cbBusquedaLocalidad
								.getSelectedItem());

			if (checkSoloImpr.isSelected()) {
				car.setCliFechaImpresion(new Date());
			} else {
				car.setCliFechaImpresion(null);
			}

			if (checkSoloPendientes.isSelected()) {
				car.setCliCantImpresiones(new Long(0));
			}

			List<CarnetLicencias> carnetLicencias = null;
			if (!error)
				carnetLicencias = carnetLicenciasService.getAll(car,
						fechaDesde, fechaHasta);

			if (!error)
				setTableModelCarnets(carnetLicencias);

			setCantidadResultados(0);
			if (!error && carnetLicencias != null && carnetLicencias.size() > 0) {
				tableLicencias.setRowSelectionInterval(0, 0);
				setCantidadResultados(carnetLicencias.size());
			}

		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	public void setCantidadResultados(int cant) {

		((TitledBorder) jPanel1.getBorder())
				.setTitle(Constantes.PANEL_RESULTADOS_BUSQUEDA + ": " + cant);
		jPanel1.validate();
		jPanel1.repaint();

	}

	public Date validarFecha(JFormattedTextField txt) {

		AbstractFormatter formatter = txt.getFormatter();
		if (formatter != null) {
			String text = txt.getText();
			try {
				formatter.stringToValue(text);

				sdf.setLenient(false);

				return sdf.parse(txt.getText());

			} catch (ParseException pe) {

				Util.mostrarError(lbSinResultados,
						Constantes.ERROR_PER_FECHA_SINFORMATO, false);
				return null;
			}
		}

		return null;

	}

	public void setTableModelCarnets(List lst) {
		TableModelCarnet tableModel = new TableModelCarnet();
		tableModel.setLst(lst);
		tableLicencias.setModel(tableModel);
		tableLicencias
				.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		tableLicencias.setRowSorter(null);

		if (lst.size() > 0) {
			//tableLicencias.setAutoCreateRowSorter(true);
			TableRowSorter sorter = new TableRowSorter(tableLicencias
					.getModel());
			sorter.setComparator(0, new DateComparator(0));
			tableLicencias.setRowSorter(sorter);
			btnReimprimir.setEnabled(true);
		} else {
			btnReimprimir.setEnabled(false);
			Util.ocultarSinResultados(lbSinResultados, false);

		}
	}

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JButton btnBuscar;
	private javax.swing.JButton btnImportar;
	private javax.swing.JButton btnImportar1;
	private javax.swing.JButton btnImportar2;
	private javax.swing.JButton btnReimprimir;
	private javax.swing.JButton btnReimprimir1;
	private javax.swing.ButtonGroup buttonGroup1;
	private javax.swing.JComboBox cbBusquedaLocalidad;
	private javax.swing.JRadioButton checkEntre;
	private javax.swing.JRadioButton checkMesActual;
	private javax.swing.JCheckBox checkSoloImpr;
	private javax.swing.JCheckBox checkSoloPendientes;
	private javax.swing.JLabel jLabel19;
	private javax.swing.JLabel jLabel21;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel8;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JLabel lbFechaEjemplo;
	private javax.swing.JLabel lbSinResultados;
	private javax.swing.JTable tableLicencias;
	private javax.swing.JTextField txtBusquedaApellido;
	private javax.swing.JFormattedTextField txtBusquedaDni;
	private javax.swing.JTextField txtBusquedaNombre;
	private javax.swing.JFormattedTextField txtEntreDesde;
	private javax.swing.JFormattedTextField txtEntreHasta;
	// End of variables declaration//GEN-END:variables
	private String valorPorDefectoFecha;
	private CarnetLicenciasDefinition carnetLicenciasService = (CarnetLicenciasDefinition) ContextManager
			.getBizObject("carnetLicenciasService");
	private DominioDefinition dominioService = (DominioDefinition) ContextManager
			.getBizObject("dominioService");

	private Date fechaDesde;
	private Date fechaHasta;
	private SimpleDateFormat sdf = new SimpleDateFormat(Util.formatoFecha);
}