/*
 * PanelScroll.java
 *
 * Created on __DATE__, __TIME__
 */

package frontend.components;

import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;

import javax.swing.JCheckBox;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;

/**
 *
 * @author  __USER__
 */
public class PanelScroll extends javax.swing.JPanel {

	/** Creates new form PanelScroll */
	public PanelScroll() {
		initComponents();

		jlist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

		jlist.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent me) {
				int selectedIndex = jlist.locationToIndex(me.getPoint());
				if (selectedIndex < 0)
					return;
				JCheckBox check = (JCheckBox) listCheckBox.getModel()
						.getElementAt(selectedIndex);
				if (check.isEnabled()) {
					check.setSelected(!check.isSelected());
					listCheckBox.repaint();
				}
			}
		});

		jScrollPane2.setViewportView(jlist);
		jlist.setFixedCellHeight(20);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jScrollPane2 = new javax.swing.JScrollPane();
		jlist = new javax.swing.JList();

		jScrollPane2.setBorder(null);
		jScrollPane2.setMaximumSize(null);
		jScrollPane2.setMinimumSize(null);

		jlist.setFont(new java.awt.Font("Segoe UI", 0, 10));
		jlist.setModel(new javax.swing.AbstractListModel() {
			String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4" };

			public int getSize() {
				return strings.length;
			}

			public Object getElementAt(int i) {
				return strings[i];
			}
		});
		jlist.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		jScrollPane2.setViewportView(jlist);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addGap(0, 0, 0).addComponent(
						jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE,
						315, Short.MAX_VALUE).addGap(0, 0, 0)));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addComponent(jScrollPane2,
						javax.swing.GroupLayout.DEFAULT_SIZE, 265,
						Short.MAX_VALUE).addGap(0, 0, 0)));
	}// </editor-fold>
	//GEN-END:initComponents

	public void cargarList() {
		jlist.setListData(datos.toArray());

		listCheckBox = new JList(buildCheckBoxItems(datos.size()));

		listCheckBox.setCellRenderer(new CheckBoxRenderer());

		listCheckBox.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

		listCheckBox.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent me) {
				int selectedIndex = listCheckBox.locationToIndex(me.getPoint());
				if (selectedIndex < 0)
					return;
				JCheckBox check = (JCheckBox) listCheckBox.getModel()
						.getElementAt(selectedIndex);
				if (check.isEnabled()) {
					check.setSelected(!check.isSelected());
					jlist.setSelectedIndex(selectedIndex);
					listCheckBox.repaint();

				}

			}
		});

		jScrollPane2.setRowHeaderView(listCheckBox);
		listCheckBox.setFixedCellHeight(jlist.getFixedCellHeight());
		listCheckBox.setFixedCellWidth(20);

		this.jScrollPane2.getVerticalScrollBar().setValue(0);
		this.validate();
		this.repaint();
	}

	class CheckBoxRenderer extends JCheckBox implements ListCellRenderer {

		public CheckBoxRenderer() {
			setBackground(UIManager.getColor("List.textBackground"));
			setForeground(UIManager.getColor("List.textForeground"));
		}

		public Component getListCellRendererComponent(JList listBox,
				Object obj, int currentindex, boolean isChecked,
				boolean hasFocus) {
			setSelected(((JCheckBox) obj).isSelected());
			return this;
		}

	}

	private Vector buildCheckBoxItems(int totalItems) {
		Vector checks = new Vector();

		for (int counter = 0; counter < totalItems; counter++) {
			JCheckBox check = new JCheckBox();
			check.setSize(20, 20);
			checks.add(check);
		}

		return checks;
	}

	public javax.swing.JScrollPane getJScrollPane2() {
		return jScrollPane2;
	}

	public void setJScrollPane2(javax.swing.JScrollPane scrollPane2) {
		jScrollPane2 = scrollPane2;
	}

	public javax.swing.JList getJlist() {
		return jlist;
	}

	public void setJlist(javax.swing.JList jlist) {
		this.jlist = jlist;
	}

	public List getDatos() {
		return datos;
	}

	public void setDatos(List datos) {
		this.datos = datos;
	}

	public void inicializar() {
		for (int i = 0; i < listCheckBox.getModel().getSize(); i++) {
			JCheckBox check = (JCheckBox) listCheckBox.getModel().getElementAt(
					i);
			check.setSelected(false);
		}

		this.validate();
		this.repaint();
	}

	public List getSeleccionados() {
		List datosSeleccionados = new ArrayList();
		for (int i = 0; i < listCheckBox.getModel().getSize(); i++) {
			JCheckBox check = (JCheckBox) listCheckBox.getModel().getElementAt(
					i);
			if (check.isSelected()) {
				datosSeleccionados.add(jlist.getModel().getElementAt(i));
			}

		}

		return datosSeleccionados;
	}

	public HashSet getSeleccionadosHashSet() {
		HashSet datosSeleccionados = new HashSet();
		for (int i = 0; i < listCheckBox.getModel().getSize(); i++) {
			JCheckBox check = (JCheckBox) listCheckBox.getModel().getElementAt(
					i);
			if (check.isSelected()) {
				datosSeleccionados.add(jlist.getModel().getElementAt(i));
			}

		}

		return datosSeleccionados;
	}

	public void setSeleccionados(Collection hashset) {

		for (int i = 0; i < jlist.getModel().getSize(); i++) {
			Object object = (Object) jlist.getModel().getElementAt(i);
			Iterator it = hashset.iterator();
			while (it.hasNext()) {
				Object obtjToSel = it.next();
				if (obtjToSel.equals(object)) {
					JCheckBox check = (JCheckBox) listCheckBox.getModel()
							.getElementAt(i);
					check.setSelected(true);
				}
			}

		}
		jScrollPane2.validate();
	}

	public void setEnabled(boolean enabled) {
		this.jlist.setEnabled(enabled);

		if (enabled)
			this.jlist.setSelectedIndex(0);
		else
			this.jlist.removeSelectionInterval(0, jlist.getModel().getSize());

		for (int i = 0; i < listCheckBox.getModel().getSize(); i++) {
			JCheckBox check = (JCheckBox) listCheckBox.getModel().getElementAt(
					i);
			check.setEnabled(enabled);
		}
	}

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JList jlist;
	// End of variables declaration//GEN-END:variables
	private List datos;
	private JList listCheckBox;
}