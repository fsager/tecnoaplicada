/*
 * PanelAgudezaVisual.java
 *
 * Created on __DATE__, __TIME__
 */

package frontend.paneles.vision;

import java.awt.Color;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;

import org.jfree.chart.plot.ThermometerPlot;

import testerGeneral.business.ContextManager;
import testerGeneral.domain.Constantes;
import testerGeneral.domain.Examen;
import testerGeneral.domain.ExamenDetalle;
import testerGeneral.domain.PersonaExamen;
import testerGeneral.domain.Resultado;
import testerGeneral.domain.ResultadoDetalleExamen;
import testerGeneral.exceptions.ExceptionIsNotHadware;
import testerGeneral.service.ExamenDetalleDefinition;
import testerGeneral.service.PersonaExamenDefinition;
import testerGeneral.service.ResultadoDetalleExamenDefinition;
import testerGeneral.threads.ThreadTrama;
import examenes.psicometrico.domain.TramaVision;
import examenes.util.ExamenesUtils;
import frontend.components.JOptionPaneTesterGral;
import frontend.paneles.examenes.Finalisable;
import frontend.paneles.examenes.PanelDetalleExamen;
import frontend.paneles.examenes.PanelExamen;
import frontend.utils.Util;

/**
 *
 * @author  __USER__
 */
public class PanelRecEncandilamiento extends javax.swing.JPanel implements
		Finalisable, PanelExamen, Runnable {

	private JToggleButton btn;
	private PersonaExamen personaExamen;
	private ExamenDetalle exaDetalle;
	private List<Resultado> resultados = new ArrayList<Resultado>();
	private int tiempo = 0;
	private boolean guardar = false;
	private boolean exito = false;
	private DecimalFormat df = new DecimalFormat("####");
	private Thread timer;
	private ThreadTrama thTrama;

	/** Creates new form PanelAgudezaVisual */
	public PanelRecEncandilamiento(JToggleButton btn,
			PersonaExamen personaExamen) {
		this.btn = btn;
		this.personaExamen = personaExamen;
		initComponents();
		cargarImagenes();
		Util.mostrarError(lbError, null, true);
		setKoIcon(btn1);
		setKoIcon(btn4);
		setKoIcon(btn3);

		lbTiempo.setText(df.format(500));

		try {
			ExamenDetalleDefinition examenDetalleService = (ExamenDetalleDefinition) ContextManager
					.getBizObject("examenDetalleService");
			exaDetalle = new ExamenDetalle();
			exaDetalle
					.setExadCodigo(ExamenDetalle.EXAD_CODIGO_TEST_REC_ENCANDILAMIENTO);
			exaDetalle = (ExamenDetalle) examenDetalleService
					.getAll(exaDetalle).get(0);

		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		inicializarThreads();
		timer = new Thread(this);
		timer.start();
	}

	public void inicializarThreads() {

		try {

			Util.thTrama.sendOrden(ThreadTrama.ORDEN_IR_TEST7);

		} catch (ExceptionIsNotHadware e) {
			JOptionPaneTesterGral.showInternalMessageDialog(e.getMessage(),
					"Error", JOptionPane.ERROR_MESSAGE);
		}

	}

	public void run() {
		tiempo = 0;
		long sleep = 30;

		try {
			while (true) {
				Thread.sleep(sleep);
				tiempo += sleep;
				lbTiempo.setText(df.format(tiempo / 10));

			}
		} catch (InterruptedException e) {
			return;
		}
	}

	public void setOkIcon(JButton btn) {
		Util.setIcon(btn, Constantes.IMG_BTN_ACEPTAR);
	}

	public void setKoIcon(JButton btn) {
		Util.setIcon(btn, Constantes.IMG_BTN_CANCELAR32);
	}

	public void cargarImagenes() {

		String binocular = ContextManager
				.getProperty("EXAMEN.REC.ENCANDILAMIENTO.IMG");
		Util.setIcon(lbImagen, binocular);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		btnGuardar = new javax.swing.JToggleButton();
		lbError = new javax.swing.JLabel();
		jLayeredPane1 = new javax.swing.JLayeredPane();
		btn1 = new javax.swing.JButton();
		btn3 = new javax.swing.JButton();
		btn4 = new javax.swing.JButton();
		lbImagen = new javax.swing.JLabel();
		jLabel1 = new javax.swing.JLabel();
		lbTiempo = new javax.swing.JLabel();

		setBorder(javax.swing.BorderFactory.createTitledBorder(""));

		btnGuardar.setFont(new java.awt.Font("Segoe UI", 3, 14));
		btnGuardar.setForeground(new java.awt.Color(0, 0, 255));
		btnGuardar.setText("Guardar Resultados");
		btnGuardar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnGuardarActionPerformed(evt);
			}
		});

		lbError.setForeground(new java.awt.Color(204, 0, 0));
		lbError.setIcon(new ImageIcon(getClass().getResource(
				Constantes.IMG_ERROR)));
		lbError.setText(Constantes.ERROR_SIN_RESULTADOS);

		jLayeredPane1.setBorder(javax.swing.BorderFactory
				.createTitledBorder(""));

		btn1
				.setIcon(new javax.swing.ImageIcon(
						"C:\\programacion\\Workspaces3\\TesterGeneral\\images\\images\\aceptar.png")); // NOI18N
		btn1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btn1ActionPerformed(evt);
			}
		});
		btn1.setBounds(60, 210, 70, 50);
		jLayeredPane1.add(btn1, javax.swing.JLayeredPane.DEFAULT_LAYER);

		btn3
				.setIcon(new javax.swing.ImageIcon(
						"C:\\programacion\\Workspaces3\\TesterGeneral\\images\\images\\aceptar.png")); // NOI18N
		btn3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btn3ActionPerformed(evt);
			}
		});
		btn3.setBounds(530, 210, 70, 50);
		jLayeredPane1.add(btn3, javax.swing.JLayeredPane.DEFAULT_LAYER);

		btn4
				.setIcon(new javax.swing.ImageIcon(
						"C:\\programacion\\Workspaces3\\TesterGeneral\\images\\images\\aceptar.png")); // NOI18N
		btn4.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btn4ActionPerformed(evt);
			}
		});
		btn4.setBounds(280, 210, 70, 50);
		jLayeredPane1.add(btn4, javax.swing.JLayeredPane.DEFAULT_LAYER);

		lbImagen
				.setIcon(new javax.swing.ImageIcon(
						"C:\\programacion\\Workspaces3\\TesterGeneral\\images\\images\\vision\\encandilamiento\\rec_encandilamiento.png")); // NOI18N
		lbImagen.setBounds(10, 0, 660, 230);
		jLayeredPane1.add(lbImagen, javax.swing.JLayeredPane.DEFAULT_LAYER);

		jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 18));
		jLabel1.setForeground(new java.awt.Color(0, 0, 255));
		jLabel1.setText("Tiempo de respuesta (cent\u00e9simas): ");
		jLabel1.setBounds(150, 290, 300, 20);
		jLayeredPane1.add(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

		lbTiempo.setFont(new java.awt.Font("Segoe UI", 3, 18));
		lbTiempo.setForeground(new java.awt.Color(0, 0, 255));
		lbTiempo.setText("500");
		lbTiempo.setBounds(450, 290, 40, 20);
		jLayeredPane1.add(lbTiempo, javax.swing.JLayeredPane.DEFAULT_LAYER);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.TRAILING,
																false)
														.addGroup(
																javax.swing.GroupLayout.Alignment.LEADING,
																layout
																		.createSequentialGroup()
																		.addComponent(
																				lbError,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				437,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				Short.MAX_VALUE)
																		.addComponent(
																				btnGuardar))
														.addComponent(
																jLayeredPane1,
																javax.swing.GroupLayout.Alignment.LEADING,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																662,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addContainerGap(212, Short.MAX_VALUE)));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addComponent(
												jLayeredPane1,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												341,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																lbError,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																24,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																btnGuardar))
										.addGap(87, 87, 87)));
	}// </editor-fold>
	//GEN-END:initComponents

	private void btn4ActionPerformed(java.awt.event.ActionEvent evt) {
		if (timer != null) {
			setOkIcon((JButton) evt.getSource());
			stopTimer();
		}
	}

	private void btn3ActionPerformed(java.awt.event.ActionEvent evt) {
		if (timer != null) {
			setOkIcon((JButton) evt.getSource());
			stopTimer();
		}
	}

	private void btn1ActionPerformed(java.awt.event.ActionEvent evt) {
		if (timer != null) {
			setOkIcon((JButton) evt.getSource());
			stopTimer();
		}
	}

	public void stopTimer() {
		timer.interrupt();
		guardar = true;
		exito = true;
	}

	public boolean isExamenValid() {
		Util.mostrarError(lbError, null, true);

		if (!guardar) {
			Util.mostrarError(lbError,
					"El examen no se ha ejecutado completamente.", false);
			return false;
		}

		return true;
	}

	public void cargarResultados() {
		resultados.clear();
		Resultado res = new Resultado();
		res.setResEtapa(0l);
		res.setResEtapaDesc("Tiempo de respuesta");
		res.setResValor1(Double.valueOf(tiempo / 10));
		resultados.add(res);
	}

	public String getResultado() {
		if (!isAprobed())
			return Examen.RESULTADO_FUERA;

		return Examen.RESULTADO_DENTRO;
	}

	public boolean isAprobed() {
		if (tiempo>5000)
			return false;

		return true;
	}

	private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {
		btnGuardar.setSelected(false);
		ResultadoDetalleExamenDefinition resultadoDetalleExamenService = (ResultadoDetalleExamenDefinition) ContextManager
				.getBizObject("resultadoDetalleExamenService");
		PersonaExamenDefinition personaExamenService = (PersonaExamenDefinition) ContextManager
				.getBizObject("personaExamenService");

		try {

			if (personaExamen != null && personaExamen.getPexaId() == null) {
				personaExamen.setPexaEstado("INICIADO");
				personaExamen.setPexaFecha(new Date());
				personaExamenService.insert(personaExamen);
			}

			if (isExamenValid()) {
				ResultadoDetalleExamen resultadoDetalleExamen = new ResultadoDetalleExamen();
				resultadoDetalleExamen.setExamenDetalle(exaDetalle);
				resultadoDetalleExamen.setPersonaExamen(personaExamen);
				List lstResultados = resultadoDetalleExamenService
						.getAll(resultadoDetalleExamen);

				if (lstResultados.size() < 1) {
					resultadoDetalleExamenService
							.insert(resultadoDetalleExamen);
				} else if (lstResultados.size() == 1) {
					resultadoDetalleExamen = (ResultadoDetalleExamen) lstResultados
							.get(0);
				}

				cargarResultados();
				String detalleResultado = new String();
				Set setResultados = resultadoDetalleExamen.getResultados();
				setResultados.clear();
				for (int i = 0; i < this.resultados.size(); i++) {
					this.resultados.get(i).setResultadoDetalleExamen(
							resultadoDetalleExamen);
					setResultados.add(this.resultados.get(i));
					detalleResultado = detalleResultado
							+ this.resultados.get(i).getResEtapaDesc() + ": "
							+ this.resultados.get(i).getResValor1().intValue()
							+ ". ";
				}

				String resultado = getResultado();

				resultadoDetalleExamen.setRdeResultado(resultado);
				resultadoDetalleExamen.setRdeDetalleResultado(detalleResultado);

				resultadoDetalleExamenService.update(resultadoDetalleExamen);

				btn.setForeground(Color.BLACK);
				Util.setIcon(btn, Constantes.IMG_ACEPTAR_SMALL);

				((PanelDetalleExamen) btn.getParent()).nextExamen(btn);
			}

		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public void finalizar() {
		stopTimer();

	}

	@Override
	public void setBtn(JToggleButton btn) {
		this.btn = btn;
	}

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JButton btn1;
	private javax.swing.JButton btn3;
	private javax.swing.JButton btn4;
	private javax.swing.JToggleButton btnGuardar;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLayeredPane jLayeredPane1;
	private javax.swing.JLabel lbError;
	private javax.swing.JLabel lbImagen;
	private javax.swing.JLabel lbTiempo;
	// End of variables declaration//GEN-END:variables

}