/*
 * JInternalFrameTesterGral.java
 *
 * Created on __DATE__, __TIME__
 */

package frontend.ventanas;

import java.awt.AWTEvent;
import java.awt.ActiveEvent;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.MenuComponent;
import java.awt.Point;
import java.beans.PropertyVetoException;

import javax.swing.JRootPane;
import javax.swing.SwingUtilities;
import javax.swing.event.MouseInputAdapter;
import javax.swing.plaf.basic.BasicInternalFrameUI;

import frontend.components.GlassPanel;
import frontend.utils.Util;

/**
 * 
 * @author __USER__
 */
public class JInternalFrameTesterGral extends javax.swing.JInternalFrame {

	/** Creates new form JInternalFrameTesterGral */
	private boolean modal=false;
	
	public JInternalFrameTesterGral(String title, boolean resizable,
			boolean closable, boolean maximizable, boolean iconifiable) {
		super(title, resizable, closable, maximizable, iconifiable);
		Util.setIcon(this, Util.SMALL_ICON);
	}
	
	public JInternalFrameTesterGral() {
		super();
		((BasicInternalFrameUI)this.getUI()).setNorthPane(null);
		Util.setIcon(this, Util.SMALL_ICON);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 394,
				Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 278,
				Short.MAX_VALUE));

		pack();
	}// </editor-fold>

	// GEN-END:initComponents

	// GEN-BEGIN:variables
	// Variables declaration - do not modify
	// End of variables declaration//GEN-END:variables

	public void doModal(JRootPane rootPane) {

		modal=true;
		glass.setOpaque(false);

		MouseInputAdapter adapter = new MouseInputAdapter() {};
		glass.addMouseListener(adapter);
		glass.addMouseMotionListener(adapter);

		glass.add(this);
		
		Dimension dim = this.getToolkit().getScreenSize();
		//rootPane=Util.dp.getRootPane();
		rootPane.setGlassPane(glass);
		glass.setVisible(true);
		
		Point  p=new Point(((rootPane.getWidth() - this.getWidth()) / 2),(rootPane.getHeight() - this.getHeight()) / 2);
		this.setLocation(p.x,p.y);
	}
	

	public void setVisible(boolean value) {
		super.setVisible(value);
		if(modal)
		{
			if (value) {
				startModal();
			} else {
				stopModal();
			}
		}
	}

	@Override
	public void setClosed(boolean b) {
		
		try {
			super.setClosed(true);
		} 
		catch (PropertyVetoException ignored) {}

		JInternalFrameTesterGral.this.setVisible(false);
		glass.setVisible(false);
	}
	
	
	public void close() {

		JInternalFrameTesterGral.this.setVisible(false);
		glass.setVisible(false);
	}
	

	private synchronized void startModal() {
		try {
			if (SwingUtilities.isEventDispatchThread()) {
				EventQueue theQueue = getToolkit().getSystemEventQueue();
				while (isVisible()) {
					AWTEvent event = theQueue.getNextEvent();
					Object source = event.getSource();
					if (event instanceof ActiveEvent) {
						((ActiveEvent) event).dispatch();
					} else if (source instanceof Component) {
						((Component) source).dispatchEvent(event);
					} else if (source instanceof MenuComponent) {
						((MenuComponent) source).dispatchEvent(event);
					} else {
						System.err.println("Unable to dispatch: " + event);
					}
					//Thread.sleep(100);
				}
			} else {
				while (isVisible()) {
					wait();
				}
			}
		} catch (InterruptedException ignored) {
		}
	}

	private synchronized void stopModal() {
		notifyAll();
	}
	
	
	public void setGlass(GlassPanel glass) {
		this.glass = glass;
	}
	
	public GlassPanel getGlass() {
		return glass;
	}
	
	private GlassPanel glass = new GlassPanel();

}